Important:-
-> To get SHA-1 or SHA-256 id:
keytool -list -v -keystore C:\Users\jrpji\.android\debug.keystore -alias androiddebugkey -storepass android -keypass android
Run the above command in terminal.


errors:-
-> Remember to change code to move textfield to the top of soft keyboard to view it properly before
typing. Do this first before doing any changes to a screen working on.
To dos:-
-> Also disable back button in sign up and login page.

Remember:-
WillPopScope(
  onWillPop: () async => false,
  child: Scaffold(
    appBar: AppBar(
      title: Text('My Page'),
    ),
    body: Center(
      child: Text('This is my page.'),
    ),
  ),
);
In this example, the onWillPop callback always returns false, which prevents the back button
of the device from navigating back.

-> check if the user is searching their own id in search contacts. The list should not show their own account.
-> Then finish login module for email and gmail sign in methods.
-> Create three index Req sent, Req pending and req accepted in the database for each user and update it accordingly.

-> If you press back button from verification email window and try to sign in again, the background futures will be called again and again causing errors.
Especially if the account is deleted in sign in window. In order to avoid this, try adding futures inside getx controller and delete it when pressing back button.

class MyController extends GetxController {
  // Your controller code here.
}

class MyPage extends StatelessWidget {
  final MyController myController = Get.put(MyController());

  @override
  Widget build(BuildContext context) {
    return WillPopScope(
      onWillPop: () async {
        Get.delete<MyController>();
        return true;
      },
      child: Scaffold(
        body: FutureBuilder(
          future: myController.myFuture,
          builder: (context, snapshot) {
            // Your FutureBuilder code here.
          },
        ),
      ),
    );
  }
}

In this example, the MyController class extends GetxController and contains your controller code. The MyPage class is a StatelessWidget that creates an instance of MyController using Get.put.

The WillPopScope widget is used to detect when the back button is pressed. When the back button is pressed, the Get.delete method is called to remove the MyController instance from memory.

The FutureBuilder widget is used to build the UI based on the result of myController.myFuture.

-> Email check is not done in signup page.
-> Have to add code to sign out user when the app is closed or paused.
-> Now, UI is not responding when back button is pressed and clicked on the screen. This is because of setting barrierDismissible as false for showDialog().Have to work on that.
->





